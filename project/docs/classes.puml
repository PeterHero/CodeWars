@startuml





/' Objects '/

class BattleController {
	+BattleController(GAME_MODE game_mode, std::optional<int> seed)
	-_game_mode : GAME_MODE
	-_battlefield : battlefield_t
	-_robotfield : robotfield_t
	-teams_alive() : size_t
	-_robots_storage : std::map<robot_id_t, Robot>
	-_robots : std::vector<std::unique_ptr<Character>>
	-create_object(std::unique_ptr<FieldObject> object) : void
	-create_objects(size_t count) : void
	-create_robot(robot_id_t id, size_t team_id, Direction direction, std::string script_file) : void
	-get_free_field(size_t& pos_x, size_t& pos_y) : void
	-print_battlefield() : void
	-refresh_battlefield() : void
	+setup_battlefield() : void
	+setup_robots(std::vector<std::string>& scripts, size_t number_of_teams, size_t robots_in_team) : void
	+simulate_battle() : void
	-update_robots() : void
}


abstract class Character {
	+~Character()
	+{abstract} is_alive() : bool
	+{abstract} id() : robot_id_t
	+{abstract} points() : size_t
	+{abstract} team_id() : size_t
	+{abstract} script_file() : std::string
	+{abstract} act() : void
}


abstract class Command {
	+~Command()
	+{abstract} execute(RobotActions& robot) : void
}


class CommandFactory {
	+{static} create(const std::vector<std::string>& line, RobotInfo& robot) : std::unique_ptr<Command>
}


class CommandMove {
	+CommandMove(Direction direction)
	-_direction : Direction
	+execute(RobotActions& robot) : void
}


abstract class Expression {
	+~Expression()
	+{abstract} evaluate(std::vector<std::string>::const_iterator begin, std::vector<std::string>::const_iterator end, RobotInfo& robot) : bool
}


abstract class FieldObject {
	+~FieldObject()
	+{abstract} is_bullet_passable() : bool
	+{abstract} is_empty() : bool
	+{abstract} is_walkable() : bool
	+{abstract} get_type() : std::string
	+{abstract} on_shoot_action(std::unique_ptr<FieldObject> previous) : std::unique_ptr<FieldObject>
	+{abstract} on_step_action(RobotEvents& robot) : void
	+{abstract} print() : void
	+{abstract} turn_refresh() : void
}


class GeneralExpression {
	+evaluate(std::vector<std::string>::const_iterator begin, std::vector<std::string>::const_iterator end, RobotInfo& robot) : bool
}


class Ground {
	+is_bullet_passable() : bool
	+is_empty() : bool
	+is_walkable() : bool
	+get_type() : std::string
	+on_shoot_action(std::unique_ptr<FieldObject> previous) : std::unique_ptr<FieldObject>
	+on_step_action(RobotEvents& robot) : void
	+print() : void
	+turn_refresh() : void
}


class Interpreter {
	+Interpreter(std::string filename)
	-_executing : bool
	-line_evaluate_expr(RobotInfo& robot) : bool
	-line_is_command() : bool
	+_filename : const std::string
	-_branch_depth : size_t
	-_current_line : size_t
	-current_depth : size_t
	-line_size() : size_t
	-get_word(size_t index) : std::string&
	-get_command(RobotInfo& robot) : std::unique_ptr<Command>
	+next_command(RobotInfo& robot) : std::unique_ptr<Command>
	-_script_unsplitted : std::vector<std::string>
	-_script : std::vector<std::vector<std::string>>
	-next_line() : void
}


class Robot {
	+Robot()
	+operatorbool() {query}
	-_bomb : Bomb*
	+get_bomb() : Bomb* {query}
	-_look_dir : Direction
	+get_look_dir() : Direction {query}
	+get_control_script() : Interpreter* {query}
	-_robotfield_ptr : array<std::array<robot_id_t, FIELD_SIZE>, FIELD_SIZE>
	-_battlefield_ptr : array<std::array<std::unique_ptr<FieldObject>, FIELD_SIZE>, FIELD_SIZE>
	+get_battlefield_ptr() : battlefield_t* {query}
	-_is_alive : bool
	+get_is_alive() : bool {query}
	+get_id() : robot_id_t {query}
	+get_robotfield_ptr() : robotfield_t* {query}
	-_health : size_t
	-_id : size_t
	-_points : size_t
	-_pos_x : size_t
	-_pos_y : size_t
	-_team_id : size_t
	+get_health() : size_t {query}
	+get_points() : size_t {query}
	+get_pos_x() : size_t {query}
	+get_pos_y() : size_t {query}
	+get_team_id() : size_t {query}
	+get_robots_ptr() : std::map<robot_id_t , Robot>* {query}
	-_robots_ptr : std::map<robot_id_t, Robot>*
	-_control_script : std::unique_ptr<Interpreter>
	-deal_bomb_damage(size_t& pos_x, size_t& pos_y, Direction direction) : void
	+print(std::ostream& stream) : void {query}
	+set_battlefield_ptr(array<std::array<std::unique_ptr<FieldObject>, FIELD_SIZE>, FIELD_SIZE> battlefield_ptr) : void
	+set_bomb(Bomb* bomb) : void
	+set_control_script(std::unique_ptr<Interpreter> control_script) : void
	+set_health(size_t health) : void
	+set_id(size_t id) : void
	+set_is_alive(bool is_alive) : void
	+set_look_dir(Direction look_dir) : void
	+set_points(size_t points) : void
	+set_pos_x(size_t pos_x) : void
	+set_pos_y(size_t pos_y) : void
	+set_robotfield_ptr(array<std::array<robot_id_t, FIELD_SIZE>, FIELD_SIZE> robotfield_ptr) : void
	+set_robots_ptr(std::map<robot_id_t, Robot>* robots_ptr) : void
	+set_team_id(size_t team_id) : void
}


abstract class RobotActions {
	+~RobotActions()
	+{abstract} move(Direction direction) : void
	+{abstract} place_bomb() : void
	+{abstract} shoot() : void
	+{abstract} turn(Rotation rotation) : void
}


abstract class RobotEvents {
	+~RobotEvents()
	+{abstract} collect_point() : void
	+{abstract} explode_bomb() : void
	+{abstract} heal() : void
	+{abstract} take_damage(size_t damage) : void
}


abstract class RobotInfo {
	+~RobotInfo()
	+{abstract} look_direction() : Direction
	+{abstract} can_move(Direction direction) : bool
	+{abstract} can_place_bomb() : bool
	+{abstract} is_low_health() : bool
	+{abstract} sees(std::string object_string) : bool
	+{abstract} sees_enemy() : bool
}


class RobotLogic {
	+RobotLogic(Robot* robot_ptr)
	+look_direction() : Direction
	-_data : Robot*
	+can_move(Direction direction) : bool
	+can_place_bomb() : bool
	+is_alive() : bool
	+is_low_health() : bool
	+sees(std::string object_string) : bool
	+sees_enemy() : bool
	+id() : robot_id_t
	+points() : size_t
	+team_id() : size_t
	+script_file() : std::string
	+act() : void
	+collect_point() : void
	-deal_bomb_damage(size_t& pos_x, size_t& pos_y, Direction direction) : void
	+explode_bomb() : void
	+heal() : void
	+move(Direction direction) : void
	+place_bomb() : void
	+shoot() : void
	+take_damage(size_t damage) : void
	+turn(Rotation rotation) : void
}


enum Direction {
	DOWN
	LEFT
	RIGHT
	UP
}


enum GAME_MODE {
	DEATHMATCH
	POINTS
	TEAM_DM
}


enum Rotation {
	LEFT
	RIGHT
}





/' Inheritance relationships '/

Character <|-- RobotLogic


Command <|-- CommandMove


Expression <|-- GeneralExpression


FieldObject <|-- Ground


RobotActions <|-- RobotLogic


RobotEvents <|-- RobotLogic


RobotInfo <|-- RobotLogic





/' Aggregation relationships '/

BattleController o-- Character


BattleController *-- GAME_MODE


BattleController *-- Robot


Bomb o-- RobotEvents


CommandMove *-- Direction


CommandTurn *-- Rotation


Robot o-- Bomb


Robot *-- Direction


Robot o-- FieldObject


Robot o-- Interpreter


Robot *-- Robot


RobotLogic o-- Robot






/' Nested objects '/



@enduml
